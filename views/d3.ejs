<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<style>
		body {
			height: 100vh;
			margin: 0;
		}

		text {
			font-family: sans-serif;
			font-size: 10px;
		}

		svg {
			width: 100%;
			height: 100%;
		}

		textarea {
			min-width: 8rem;
			max-width: 8rem;
   			max-height: 8rem;
		}

		button {
			display: block;
			margin: 1rem 0;
		}

		#floatbox {
			position: fixed;
			top: 1rem;
			left: 1rem;
			z-index: 10;

			padding: 1rem;
		}

	</style>

	<link rel="stylesheet" href="/scss.css">
	
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<body>
	<div id="floatbox">
		<h1>Graphoto</h1>
		<textarea id="input_text" rows="3" placeholder="type here"></textarea>
		<p>or</p>
		<input type="file" name="file" id="input_file">
		<button id="button_sumbit" type="button">Submit</button>
		<input type="number" name="fps" id="input_fps">
		<button id="button_fps" type="button">Set FPS</button>
	</div>

	<div id="cat" class="box">
		<div class="cat">
			<div class="cat__body"></div>
			<div class="cat__body"></div>
			<div class="cat__tail"></div>
			<div class="cat__head"></div>
		</div>
	</div>

	<svg></svg>
	
	<script>
		var fps          = 30;
		var frame        = 0;
		var frameTick    = 0;
		var tickEnable   = false;

		var timeInterval = null;
		var timeOut      = null;
		var width        = 1280;
		var height       = 720;
		var svg          = d3.select("svg");
		var simulation;
		var link, node;

		var big_score;

		/*
		
		drag
		
		*/
		function dragstarted(d) {
			if (!d3.event.active) simulation.alphaTarget(0.3).restart();
			d.fx = d.x;
			d.fy = d.y;
		}
		function dragged(d) {
			d.fx = d3.event.x;
			d.fy = d3.event.y;
		}
		function dragended(d) {
			if (!d3.event.active) simulation.alphaTarget(0);
			d.fx = null;
			d.fy = null;
		}

		// set fps
		function set_fps(_fps) {
			console.log('set fps: ' + _fps);
			// validate fps
			fps = _fps;
			if (fps <   1) fps =   1;
			if (fps > 144) fps = 144;

			// set interval
			if (timeInterval) clearInterval(timeInterval);
			timeInterval = setInterval(function () {
				if (++frame > fps) frame = frameTick = 0;
				tick();
			}, 1000 / fps);
		}

		function tick() {
			if (!tickEnable) return;
			if (frameTick > frame) return;
			frameTick++;
			link
				.attr("x1", function (d) { return d.source.x; })
				.attr("y1", function (d) { return d.source.y; })
				.attr("x2", function (d) { return d.target.x; })
				.attr("y2", function (d) { return d.target.y; });

			node
				.attr("cx", function (d) { return d.x; })
				.attr("cy", function (d) { return d.y; });
		}

		// load analyzed data from server and visualize
		function visualize(result) {

			var data = result.result;

			// handle exception: no result
			if (data == null) return;

			// log data to test
			console.log(data);

			graph = data.d3data;
			
			// handle exception: no graph
			if (graph == null) return;

			big_score = Math.sqrt(data.numberOfNodes + data.numberOfEdges);

			// clear previous graph
			svg.selectAll("*").remove();

			// set d3
			simulation = d3.forceSimulation(graph.nodes)
			.force("link", d3.forceLink().id(function (d) {
				return d.id;
			}))
			.force("charge", d3.forceManyBody())
			.force("center", d3.forceCenter(width / 2, height / 2));

			// set opacity
			var opacity = 2 / (2 + Math.sqrt(data.numberOfEdges) / 32);
			console.log("opacity:" + opacity);
			
			// append links
			link = svg.append("g")
				.attr("class", "links")
				.selectAll("line")
				.data(graph.links)
				.enter().append("line")
				.attr("stroke-opacity", function (d) {
					return d.intersect_ratio * 0.85 + 0.15;
				})
				.attr("display", function (d) {
					if (d.is_deleted == 'Y') return "none";
					else return "";
				})
				.attr("stroke-width", function (d) {
					return Math.sqrt(d.intersect) + 1;
				})
				.attr("stroke", function (d) {
					var rank = 1 - d.intersect_ratio;
					var r = Math.sqrt(1 - rank) * 255;
					//var g = (rank >= 0.25 && rank < 0.5) ? (rank - 0.25) * 4 * 255
					//		: ((rank >= 0.5 && rank <= 0.75) ? (0.75 - rank) * 4 * 255 : 0);
					var g = (rank < 0.2) ? 0 : ((rank < 0.6) ? rank / 0.6 * 240 : Math.sqrt((1 - rank) / 0.4) * 240);
					var b = (rank > 0.5) ? (rank - 0.5) / 0.5 * 255 : 0;
					
					return "rgb(" + Math.floor(r) + "," + Math.floor(g) +","+ Math.floor(b) + ")";
				});

			// append nodes
			node = svg.append("g")
				.attr("class", "nodes")
				.selectAll("circle")
				.data(graph.nodes)
				.enter().append("circle")
				.attr("r", function(d) {
					if (graph.maxNodeSize > 0)
						return d.size / graph.maxNodeSize * 8 + 1;
					else
						return 1;
				})
				.attr("fill", () => "#aa0000")
				.call(d3.drag()
					.on("start", dragstarted)
					.on("drag", dragged)
					.on("end", dragended)
				);

			// set zoom in/out
			svg.call(d3.zoom()
				.scaleExtent([1/(128 + big_score), 8])
				.on("zoom", function () {
					svg.selectAll("g").attr("transform", d3.event.transform);
				})
			);

			/*var lables = node.append("text")
				.text(function (d) {
					return d.id;
				})
				.attr('x', 6)
				.attr('y', 3);*/

			// set title of each node
			node.append("title")
				.text(function (d) {
					return d.id;
				});

			set_fps(fps);

			tickEnable = false;
			if (timeOut) clearTimeout(timeOut);
			timeOut = setTimeout(function () {
				console.log('tick enabled');
				display_cat(false);
				tickEnable = true;
				timeOut = null;
			}, 100 + big_score * 50);

			simulation.on("tick", tick);
			simulation.force("link").links(graph.links);
		}

		// show, hide cat
		function display_cat(bool) {
			$('#cat').css('display', bool ? '' : 'none');
		}

		// submit user data to server
		function submit() {
			display_cat(true);

			var formData = new FormData();
				formData.append("input_text", $("#input_text").val());
				formData.append("input_file", $("#input_file")[0].files[0]);

			// clear previous graph
			svg.selectAll("*").remove();

			$.ajax({
				url: '/upload',
				type: 'POST',
				data: formData,
				contentType: false,
				processData: false,
				success: visualize,
				error: console.log
			});
		}

		// initialize
		$(document).ready(function () {
			$('#input_text').val('0	1\n1	2\n2	3\n2	4\n2	5\n3	4\n3	7\n4	5\n4	6\n4	7\n5	7\n6	8');
			$('#button_sumbit').click(submit);
			$('#button_fps').click(function () { set_fps(parseInt($("#input_fps").val())); });
			submit();
		})
	</script>
</body>

</html>