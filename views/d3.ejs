<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
	<style>
		body {
			height: 100vh;
			margin: 0;
		}

		textarea {
			min-height: 3rem;
		}

		#floatbox {
			z-index: 10;
		}

		#floatbox > div {
			width: 16rem;
		}

		#button_fps {
			white-space: nowrap;
		}

		#p_result {
			max-height: 8rem;
			overflow: auto;
		}

	</style>

	<link rel="stylesheet" href="/scss.css">
	
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<body>
	<div id="floatbox" class="vh-100 p-4 small position-fixed top-0 left-0">
		<div class="h-100 pr-3 overflow-auto">
			<p class="display-4">Graphoto</p>

			<p class="font-weight-bold mt-4">Input</p>
			<div class="mb-3">
				<div class="input-group mb-2">
					<div class="custom-file">
						<input id="input_file" name="file" type="file" class="custom-file-input">
						<label class="custom-file-label" for="input_file">Choose file</label>
					</div>
				</div>
				<p class="mb-2">or type</p>
				<textarea id="input_text" class="form-control" rows="3" placeholder="type here"></textarea>
			</div>

			<div class="custom-control custom-switch mb-2">
				<input type="checkbox" class="custom-control-input" id="input_switch" checked>
				<label class="custom-control-label" for="input_switch">Detect group</label>
			</div>

			<button id="button_sumbit" class="btn btn-block btn-primary" type="button">Submit</button>

			<p class="font-weight-bold mt-4">Option</p>
			<div class="input-group input-group-sm mb-3">
				<input type="number" name="fps" id="input_fps" class="form-control">
				<div class="input-group-append">
					<button id="button_fps" class="btn btn-secondary" type="button">Set FPS</button>
				</div>
			</div>

			<p class="font-weight-bold mt-4">Result</p>
			<p id="p_result" class="text-break"></p>
		</div>
	</div>

	<div id="cat" class="box">
		<div class="cat">
			<div class="cat__body"></div>
			<div class="cat__body"></div>
			<div class="cat__tail"></div>
			<div class="cat__head"></div>
		</div>
	</div>

	<svg class="vh-100 w-100"></svg>
	
	<script>
		var fps          = 30;
		var frame        = 0;
		var frameTick    = 0;
		var tickEnable   = false;

		var timeInterval = null;
		var timeOut      = null;
		var width        = 1280;
		var height       = 720;
		var svg          = d3.select("svg");
		var simulation;
		var link, node;

		var big_score;

		var community_random_colors;

		/*

			drag

		*/
		function dragstarted(d) {
			if (!d3.event.active) simulation.alphaTarget(0.3).restart();
			d.fx = d.x;
			d.fy = d.y;
		}
		function dragged(d) {
			d.fx = d3.event.x;
			d.fy = d3.event.y;
		}
		function dragended(d) {
			if (!d3.event.active) simulation.alphaTarget(0);
			d.fx = null;
			d.fy = null;
		}

		/*

			fps and tick

		*/

		// set fps
		function set_fps(_fps) {
			console.log('set fps: ' + _fps);
			// validate fps
			fps = _fps;
			if (fps <   1) fps =   1;
			if (fps > 144) fps = 144;

			// set interval
			if (timeInterval) clearInterval(timeInterval);
			timeInterval = setInterval(function () {
				if (++frame > fps) frame = frameTick = 0;
				tick();
			}, 1000 / fps);
		}

		function tick() {
			if (!tickEnable) return;
			if (frameTick > frame) return;
			frameTick++;
			link
				.attr("x1", function (d) { return d.source.x; })
				.attr("y1", function (d) { return d.source.y; })
				.attr("x2", function (d) { return d.target.x; })
				.attr("y2", function (d) { return d.target.y; });

			node
				.attr("cx", function (d) { return d.x; })
				.attr("cy", function (d) { return d.y; });
		}

		/*

			color and visualize

		*/
		function generateRandomColors(length) {
			console.log("generate random colors");
			var hexString;
			var max, red, green, blue, plus;
			community_random_colors = [
				'#2979FF',
				'#FF1744',
				'#FFEA00',
				'#64FFDA',
				'#C6FF00',
				'#2E7D32',
				'#673AB7',
				'#D500F9',
				'#00E676',
				'#FB8C00',
				'#795548',
				'#5D4037',
				'#424242',
			];
			length -= community_random_colors.length;
			while (length-- > 0) {
				plus   = parseInt(Math.random() * 3);
				red    = Math.pow(Math.random(), 2);
				green  = Math.pow(Math.random(), 2);
				blue   = Math.pow(Math.random(), 2);
				max    = Math.max(red, green, blue);
				if (red   == max) { green *= 0.7; blue  *= 0.7; }
				if (green == max) { red   *= 0.7; blue  *= 0.7; }
				if (blue  == max) { red   *= 0.7; green *= 0.7; }
				red    = ('00' + parseInt(red   / max * 215).toString(16)).substr(-2);
				green  = ('00' + parseInt(green / max * 70 + 80).toString(16)).substr(-2);
				blue   = ('00' + parseInt(blue  / max * 215).toString(16)).substr(-2);
				community_random_colors.push('#' + red + green + blue);
			}
			console.log(community_random_colors);
		}

		// load analyzed data from server and visualize
		function visualize(_data) {

			var data = _data;

			// handle exception: no result
			if (data == null) return;

			// log data to test
			console.log(data);

			generateRandomColors(data.numberOfCommunities);

			graph = data.d3data;
			
			// handle exception: no graph
			if (graph == null) return;

			big_score = Math.sqrt(data.numberOfNodes + data.numberOfEdges);

			// clear previous graph
			svg.selectAll("*").remove();

			// set d3
			simulation = d3.forceSimulation(graph.nodes)
			.force("link", d3.forceLink().id(function (d) {
				return d.id;
			}))
			.force("charge", d3.forceManyBody())
			.force("center", d3.forceCenter(width / 2, height / 2));

			// set opacity
			var opacity = 2 / (2 + Math.sqrt(data.numberOfEdges) / 32);
			console.log("opacity:" + opacity);
			
			// append links
			link = svg.append("g")
				.attr("class", "links")
				.selectAll("line")
				.data(graph.links)
				.enter().append("line")
				.attr("stroke-opacity", function (d) {
					if (data.numberOfEdges < 100)
						return d.intersect_ratio * 0.5 + 0.5;
					if (data.numberOfEdges < 1000)
						return d.intersect_ratio * 0.7 + 0.3;
					if (data.numberOfEdges < 10000)
						return d.intersect_ratio * 0.85 + 0.15;
					return d.intersect_ratio * 0.9 + 0.1;
				})
				.attr("display", function (d) {
					if (d.is_deleted == 'Y') return "none";
					else return "";
				})
				.attr("stroke-width", function (d) {
					return Math.sqrt(d.intersect) + 1;
				})
				.attr("stroke", function (d) {
					var rank = 1 - d.intersect_ratio;
					var r = 16 + (Math.sqrt(1 - rank) * 239);
					var g = 10 + ((rank < 0.3) ? 0 :
						((rank < 0.6) ? rank / 0.6 * 230 : Math.sqrt((1 - rank) / 0.4) * 200) + 30);
					var b = 12 + ((rank > 0.6) ? (rank - 0.6) / 0.4 * 250 : 0);
					
					return "rgb(" + Math.floor(r) + "," + Math.floor(g) +","+ Math.floor(b) + ")";
				});

			// append nodes
			node = svg.append("g")
				.attr("class", "nodes")
				.selectAll("circle")
				.data(graph.nodes)
				.enter().append("circle")
				.attr("r", function(d) {
					if (graph.maxNodeSize > 0)
						return d.size / graph.maxNodeSize * 8 + 1;
					else
						return 1;
				})
				.attr("fill", function (d) {
					return community_random_colors[d.group];
				})
				.call(d3.drag()
					.on("start", dragstarted)
					.on("drag", dragged)
					.on("end", dragended)
				);

			// set zoom in/out
			svg.call(d3.zoom()
				.scaleExtent([1, 1])
				.scaleExtent([1/(128 + big_score), 8])
				.on("zoom", function () {
					svg.selectAll("g").attr("transform", d3.event.transform);
				})
			);

		/*var lables = node.append("text")
				.text(function (d) {
					return d.group;
				})
				.attr('x', 6)
				.attr('y', 3);*/

			// set title of each node
			node.append("title")
				.text(function (d) {
					return d.group;
				});

			set_fps(fps);

			tickEnable = false;
			if (timeOut) clearTimeout(timeOut);
			timeOut = setTimeout(function () {
				console.log('tick enabled');
				display_cat(false);
				tickEnable = true;
				timeOut = null;
			}, 100 + big_score * 50);

			simulation.on("tick", tick);
			simulation.force("link").links(graph.links);
		}

		/*

			Show result text.

		*/
		function show_result(result) {
			let _ = result.result;
			$('#p_result').html(`
				Number of Nodes: ${_.numberOfNodes}<br>
				Number of Edges: ${_.numberOfEdges}<br>
				Number of Communities: ${_.numberOfCommunities}<br>
				<br>
				Modularity: ${_.modularity}<br>
				Density: ${_.density}<br>
			`);
			visualize(_);
		}

		// show, hide cat
		function display_cat(bool) {
			$('#cat').css('display', bool ? '' : 'none');
		}

		// submit user data to server
		function submit() {
			display_cat(true);

			var formData = new FormData();
				formData.append("input_text", $("#input_text").val());
				formData.append("input_file", $("#input_file")[0].files[0]);

			// clear previous graph
			svg.selectAll("*").remove();

			$.ajax({
				url: '/upload',
				type: 'POST',
				data: formData,
				contentType: false,
				processData: false,
				success: show_result,
				error: console.log
			});
		}

		// initialize
		$(document).ready(function () {
			$('#input_text').val('0	1\n1	2\n2	3\n2	4\n2	5\n3	4\n3	7\n4	5\n4	6\n4	7\n5	7\n6	8');
			$('#button_sumbit').click(submit);
			$('#button_fps').click(function () { set_fps(parseInt($("#input_fps").val())); });
			submit();
		})
	</script>
</body>

</html>